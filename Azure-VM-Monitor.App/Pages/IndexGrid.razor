@page "/"
@using AzureVMMonitor.App.Services
@using AzureVMMonitor.App.Models

@inject IAzVmService AzVmService

<PageTitle>Index</PageTitle>

<h1>Virtual Machines</h1>

@if (_vmStatus == null || _uniqueResourceGroups == null)
{
    <p>Loading...</p>
}
else
{
    <MudSelect T="string" MultiSelection="true" SelectAll="true" SelectAllText="Select all Resource Groups" HelperText="@value" @bind-Value="value" @bind-SelectedValues="options" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" Label="Resource Groups" AdornmentIcon="@Icons.Material.Filled.Search">
        @foreach (var resourceGroup in _uniqueResourceGroups)
        {
            <MudSelectItem T="string" Value="@resourceGroup">@resourceGroup</MudSelectItem>
        }
    </MudSelect>
    <MudGrid Justify="Justify.FlexStart" Spacing="1">
        @foreach (var vm in _vmStatus)
        {
            @* <p>@(_count++) @vm!.ResourceGroup @vm!.VirtualMachine @vm!.PowerState</p> *@
            <MudItem xs="3">
                <MudCard>
                    <MudCardHeader Style=@StyleForVMState(vm!.PowerState)>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@vm!.VirtualMachine</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@vm.PowerState</MudText>
                        <MudText Typo="Typo.body2">@vm.OsName</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Open</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
@code {

    private IEnumerable<VmStatus>? _vmStatus;
    private int _count = 1;
    private IEnumerable<string> _uniqueResourceGroups;
    private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> options { get; set; } 

    private string StyleForVMState(string state)
    {
        switch (state)
        {
            case "VM running":
                return "background: green; color: white";
                
            case "VM stopped":
                return "background: red; color: white";
                
            case "VM deallocated":
                return "background: darkgray; color: white";
        }
        return "";
    }
    
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"{selectedValues.Count} resource group{(selectedValues.Count > 1 ? "s have" : " has")} been selected";
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // _uniqueResourceGroups = _vmStatus.Select(x => x.ResourceGroup).Distinct().ToList();
        // options = new HashSet<string>(_uniqueResourceGroups);
        // StateHasChanged();
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        _vmStatus = await AzVmService.FetchStatus();
        _uniqueResourceGroups = _vmStatus.Select(x => x.ResourceGroup).Distinct().ToList();
        options = new HashSet<string>(_uniqueResourceGroups);

        await base.OnInitializedAsync();
    }

}