@page "/"
@using AzureVMMonitor.App.Services
@using AzureVMMonitor.App.Models

@inject IAzVmService AzVmService

<PageTitle>Index</PageTitle>

<h1>Virtual Machines</h1>

@if (_vmStatus == null)
{
    <p>Loading...</p>
}
else
{
    <MudGrid Justify="Justify.FlexStart" Spacing="2">
        @foreach (var vm in _vmStatus)
        {
            @* <p>@(_count++) @vm!.ResourceGroup @vm!.VirtualMachine @vm!.PowerState</p> *@
            @* <MudItem xs="3"> *@
            @*     <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8"> *@
            @*         <MudText Typo="Typo.h6" Align="Align.Center">@vm!.VirtualMachine</MudText> *@
            @*         <MudText Typo="Typo.h6" Align="Align.Center">@vm!.PowerState</MudText> *@
            @*     </MudPaper> *@
            @* </MudItem> *@
            <MudItem xs="3">
                <MudCard>
                    <MudCardHeader Style=@StyleForVMState(vm!.PowerState)>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@vm!.VirtualMachine</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText>@vm.PowerState</MudText>
                        <MudText Typo="Typo.body2">@vm.OsName</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Open</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
@code {

    private IEnumerable<VmStatus>? _vmStatus;
    private int _count = 1;

    private string StyleForVMState(string state)
    {
        switch (state)
        {
            case "VM running":
                return "background: green";
                
            case "VM stopped":
                return "background: red";
                
            case "VM deallocated":
                return "background: lightgray";
        }
        return "";
    }
    protected override async Task OnInitializedAsync()
    {
        _vmStatus = await AzVmService.FetchStatus();
        await base.OnInitializedAsync();
    }

}