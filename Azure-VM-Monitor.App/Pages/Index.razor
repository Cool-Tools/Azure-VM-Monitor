@page "/" //"/Index-Table"
@using AzureVMMonitor.App.Services
@using AzureVMMonitor.App.Models

@inject IAzVmService AzVmService

<PageTitle>Index</PageTitle>

<h1>Virtual Machines</h1>

@if (_vmStatus == null)
{
    <p>Loading...</p>
}
else
{
    <MudDataGrid T="VmStatus" Items="@_vmStatus" Filterable="true" FilterMode="@DataGridFilterMode.ColumnFilterMenu">
        <Columns>
            @* <PropertyColumn Property="x => (_count)" Title="#" Filterable="false" /> *@
            <PropertyColumn Property="x => x.VirtualMachine" Filterable="true" CellStyleFunc="@_cellStyleFunc"></PropertyColumn>
            <PropertyColumn Property="x => x.ResourceGroup" Title="Resource Group" Filterable="true">
                <FilterTemplate>
                    @* <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small" /> *@
                    <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)" /> 
                    <MudPopover Open="@_filterOpen" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopCenter"
                                Style="width:300px">
                        <MudStack Spacing="0">
                            <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Checked="@_selectAll" CheckedChanged="@SelectAll" />
                            <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                                @foreach (var item in _uniqueResourceGroups)
                                {
                                    <MudCheckBox T="bool" Label="@($"{item}")" Size="@Size.Small" Checked="@(_selectedResourceGroups.Contains(item))"
                                                 CheckedChanged="@((value) => SelectedChanged(value, item))" />
                                }
                            </MudStack>
                            <MudStack Row="true">
                                <MudButton OnClick="@(() => ClearFilterAsync(context))">Clear</MudButton>
                                <MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context))">Filter</MudButton>
                            </MudStack>
                        </MudStack>
                    </MudPopover>
                </FilterTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.OsName" Filterable="true"></PropertyColumn>
            <PropertyColumn Property="x => x.OsVersion" Filterable="false"></PropertyColumn>
            <PropertyColumn Property="x => x.PowerState" Filterable="false" CellStyleFunc="@_cellStyleFunc"></PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="VmStatus" />
        </PagerContent>
    </MudDataGrid>
}
@code {
    string _icon = Icons.Material.Outlined.FilterAlt;
    private IEnumerable<VmStatus>? _vmStatus;
    private int _count = 1;
    bool _filterOpen = true;
    bool _selectAll = true;
    private IEnumerable<string>? _uniqueResourceGroups;
    HashSet<string> _selectedResourceGroups = new();
    HashSet<VmStatus> _filterItems = new();
    FilterDefinition<VmStatus>? _filterDefinition;
    
    private Func<VmStatus, string> _cellStyleFunc => x =>
    {
        string style = "";

        switch (x.PowerState)
        {
            case "VM running":
                style += "color: green;";
                break;
                
            case "VM stopped":
                style += "color: red;";
                break;
                
            case "VM deallocated":
                style += "color: darkgray;";
                break;
        }

        return style;
    };
    
    void OpenFilter()
    {
        _filterOpen = true;
    }
    
    private void SelectAll(bool value)
    {
        _selectAll = value;

        if (value)
        {
            _selectedResourceGroups = _uniqueResourceGroups.ToHashSet();
        }
        else
        {
            _selectedResourceGroups.Clear();
        }
    }
    
    private void SelectedChanged(bool value, string item)
    {
        if (value)
            _selectedResourceGroups.Add(item);
        else
            _selectedResourceGroups.Remove(item);

        if (_selectedResourceGroups.Count == _vmStatus.Count())
            _selectAll = true;
        else
            _selectAll = false;
    }

    private async Task ClearFilterAsync(FilterContext<VmStatus> context)
    {
        _selectedResourceGroups = _uniqueResourceGroups!.ToHashSet();
        _filterItems = _vmStatus!.ToHashSet();
        _icon = Icons.Material.Outlined.FilterAlt;
        await context.Actions.ClearFilterAsync(_filterDefinition!);
        // _filterOpen = false;
    }

    private async Task ApplyFilterAsync(FilterContext<VmStatus> context)
    {
        _filterItems = _vmStatus!.ToHashSet();
        _icon = _filterItems.Count == _vmStatus!.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
        await context.Actions.ApplyFilterAsync(_filterDefinition!);
        // _filterOpen = false;
    }
    
    private string StyleForVMState(string state)
    {
        switch (state)
        {
            case "VM running":
                return "background: green; color: white";
                
            case "VM stopped":
                return "background: red; color: white";
                
            case "VM deallocated":
                return "background: darkgray; color: white";
        }
        return "";
    }
    protected override async Task OnInitializedAsync()
    {
        _vmStatus = await AzVmService.FetchStatus();
        if (_vmStatus != null)
        {
            _uniqueResourceGroups = _vmStatus.Select(x => x.ResourceGroup).Distinct().ToList();
            _selectedResourceGroups = _uniqueResourceGroups.ToHashSet();
            _filterItems = _vmStatus.ToHashSet();
        }
        _filterDefinition = new FilterDefinition<VmStatus>
        {
            FilterFunction = x => _selectedResourceGroups.Contains(x.ResourceGroup)
        };
        // await base.OnInitializedAsync();
    }

}